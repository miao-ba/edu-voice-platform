version: '3.8'

services:
  # 前端服務
  frontend:
    build:
      context: ./frontend
      dockerfile: ../deployment/docker/frontend/Dockerfile
    ports:
      - "3000:80"
    depends_on:
      - api-gateway
    environment:
      - API_URL=http://localhost:8000
      - WEBSOCKET_URL=ws://localhost:8000/ws
      - NODE_ENV=development
    volumes:
      - ./frontend:/app
      - /app/node_modules

  # API 閘道服務
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: ../deployment/docker/api-gateway/Dockerfile
    ports:
      - "8000:8000"
    depends_on:
      - core
      - audio-service
      - ai-service
      - content-service
      - auth-service
    environment:
      - NODE_ENV=development
      - PORT=8000
      - AUTH_SERVICE_URL=http://auth-service:8001
      - CORE_SERVICE_URL=http://core:8002
      - AUDIO_SERVICE_URL=http://audio-service:8003
      - AI_SERVICE_URL=http://ai-service:8004
      - CONTENT_SERVICE_URL=http://content-service:8005
      - JWT_SECRET=${JWT_SECRET_KEY}
    volumes:
      - ./api-gateway:/app
      - /app/node_modules

  # Django 核心服務
  core:
    build:
      context: ./core
      dockerfile: ../deployment/docker/core/Dockerfile
    ports:
      - "8002:8002"
    depends_on:
      - postgres
      - redis
      - kafka
    env_file:
      - ./.env
    environment:
      - DJANGO_SETTINGS_MODULE=core_project.settings.development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./core:/app
      - ./media:/app/media
      - ./static:/app/static
      - ./scripts:/scripts

  # 音訊處理服務
  audio-service:
    build:
      context: ./audio-service
      dockerfile: ../deployment/docker/audio-service/Dockerfile
    ports:
      - "8003:8003"
    depends_on:
      - kafka
      - redis
    env_file:
      - ./.env
    environment:
      - SERVICE_NAME=audio-service
      - PORT=8003
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_CONSUMER_GROUP_ID=audio-service-group
      - MEDIA_ROOT=/app/media
    volumes:
      - ./audio-service:/app
      - ./media:/app/media

  # AI 處理服務
  ai-service:
    build:
      context: ./ai-service
      dockerfile: ../deployment/docker/ai-service/Dockerfile
    ports:
      - "8004:8004"
    depends_on:
      - kafka
      - postgres
      - pgvector
      - redis
    env_file:
      - ./.env
    environment:
      - SERVICE_NAME=ai-service
      - PORT=8004
      - DB_HOST=postgres
      - VECTOR_DB_HOST=pgvector
      - REDIS_HOST=redis
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_CONSUMER_GROUP_ID=ai-service-group
      - DEFAULT_MODEL_PROVIDER=gemini
    volumes:
      - ./ai-service:/app

  # 內容生成服務
  content-service:
    build:
      context: ./content-service
      dockerfile: ../deployment/docker/content-service/Dockerfile
    ports:
      - "8005:8005"
    depends_on:
      - kafka
      - redis
    env_file:
      - ./.env
    environment:
      - SERVICE_NAME=content-service
      - PORT=8005
      - REDIS_HOST=redis
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_CONSUMER_GROUP_ID=content-service-group
      - MEDIA_ROOT=/app/media
      - OUTPUT_DIR=/app/media/generated_content
      - AI_SERVICE_URL=http://ai-service:8004
    volumes:
      - ./content-service:/app
      - ./media:/app/media

  # 認證服務
  auth-service:
    build:
      context: ./auth-service
      dockerfile: ../deployment/docker/auth-service/Dockerfile
    ports:
      - "8001:8001"
    depends_on:
      - postgres
      - redis
      - kafka
    env_file:
      - ./.env
    environment:
      - SERVICE_NAME=auth-service
      - PORT=8001
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_CONSUMER_GROUP_ID=auth-service-group
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=${JWT_ACCESS_TOKEN_EXPIRE_MINUTES}
      - JWT_REFRESH_TOKEN_EXPIRE_DAYS=${JWT_REFRESH_TOKEN_EXPIRE_DAYS}
    volumes:
      - ./auth-service:/app

  # PostgreSQL 資料庫
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${DB_USER:-eduvoice}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-eduvoicepass}
      - POSTGRES_DB=${DB_NAME:-eduvoice}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/db:/scripts/db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U eduvoice"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PgVector 向量資料庫
  pgvector:
    image: ankane/pgvector:latest
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_USER=${VECTOR_DB_USER:-eduvoice}
      - POSTGRES_PASSWORD=${VECTOR_DB_PASSWORD:-eduvoicepass}
      - POSTGRES_DB=${VECTOR_DB_NAME:-eduvoice_vector}
    volumes:
      - pgvector_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U eduvoice"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 快取
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka 事件匯流排
  kafka:
    image: bitnami/kafka:3.4
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - kafka_data:/bitnami/kafka
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  postgres_data:
  pgvector_data:
  redis_data:
  kafka_data: